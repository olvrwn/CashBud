//
//  TransactionsManagerMock.swift
//  CashBudTests
//
//  Created by Oliver Dieke on 09.09.23.
//

import Foundation
@testable import CashBud // manual: @

final class TransactionsManagerMock: TransactionsManagerProtocol { // manual: fi
    
    var readFromDocumentsDirectoryResult: Result<[Transaction], Error>? // manual
    var writeToDocumentsDirectoryResult: Result<Void, Error>? // manual: v
    var deleteResult: Result<Void, Error>? // manual: v
    var calculateMonthlyCostsResponse: Double? // manual: var calculateMonthlyCostsResponse: D
    var sortTransactionsResponse: [Transaction]? // manual: v
    var getIconStringResponse: String?
    
    func readFromDocumentsDirectory<T: Codable>(from filename: String) throws -> T { // generated by Xcode because of protocol
        switch readFromDocumentsDirectoryResult {       // manual: swi
            case .success(let transactions):
                return transactions as! T
            case .failure(let error):
                throw error
            case .none: // manual: ca
                throw NSError()
        } // manual
    }
    
    func writeToDocumentsDirectory(into filename: String, data: some Decodable & Encodable) throws { // generated by Xcode because of protocol
        switch writeToDocumentsDirectoryResult {
            case .success:
                return
            case .failure(let error):
                throw error
            case .none:
                throw NSError()
        } // manual
    }
    
    func delete(id: UUID) throws { // generated by Xcode because of protocol
        switch deleteResult {
        case .success:
            return
        case .failure(let error):
            throw error
        case .none:
            throw NSError()
        } // manual
    }
    
    func calculateMonthlyCosts(recurrence: CashBud.TransactionRecurrence, costs: Double) -> Double { // generated by Xcode because of protoco
        calculateMonthlyCostsResponse! // error due to optional value, manual: !
    }
    
    func sortTransactions(_ transactions: [CashBud.Transaction]) -> [CashBud.Transaction] { // generated by Xcode because of protocol
        sortTransactionsResponse!
    }
    
    func getIconString(transactionCategory: CashBud.TransactionCategory) -> String { // generated by Xcode because of protocol
        getIconStringResponse!
    }
}
